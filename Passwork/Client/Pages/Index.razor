@page "/"
@using Passwork.Client.Components;
@using Passwork.Shared.ViewModels;
@using System.Runtime.CompilerServices;
@using System.ComponentModel;

@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject ApiService ApiService
@inject HubClient HubClient
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Index</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-left mud-width-full py-2 mt-4">
            <MudText Typo="Typo.h6" Class="px-4"> / ComPas / @currentComName / Пароль  </MudText>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="2">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <AuthorizeView>
                <Authorized>
                    <MudNavMenu Class="mud-width-full">
                        <MudText Typo="Typo.h6" Class="px-4">Компании</MudText>
                        <MudDivider Class="my-2" />
                        @foreach (var com in ApiService.OwnerCompanies)
                        {
                            <MudNavGroup Title="@com.Name" Icon="@Icons.Material.Filled.Group" IconColor="Color.Primary" Expanded="true">
                                @if(com.SafeVms != null)
                                {
                                    @foreach (var safe in com.SafeVms)
                                    {
                                        <MudNavLink OnClick="@(() => SelectSafe(safe.Id, safe.Title, com.Name))" Icon="@Icons.Material.Filled.Lock" IconColor="Color.Success">
                                            @safe?.Title
                                        </MudNavLink>
                                    }
                                }
                                <MudNavLink OnClick="@((e) => CreateSafe(com.Id, com.Name))" Icon="@Icons.Material.Filled.AddCircleOutline" IconColor="Color.Success">
                                    Новый сейф
                                </MudNavLink>
                            </MudNavGroup>
                        }
                        @foreach (var com in ApiService.Companies)
                        {
                            <MudNavGroup Title="@com.Name" Icon="@Icons.Material.Filled.Group" IconColor="Color.Primary" Expanded="true">
                                @if(com.SafeVms != null)
                                {
                                    @foreach (var safe in com.SafeVms)
                                    {
                                        <MudNavLink Icon="@Icons.Material.Filled.HealthAndSafety" IconColor="Color.Success">@safe?.Title</MudNavLink>
                                    }
                                }
                            </MudNavGroup>
                        }
                    </MudNavMenu>
                </Authorized>
                <NotAuthorized>
                    <MudText Typo="Typo.body2" Color="Color.Error" Class="px-4">Требуется авторизация</MudText>
                </NotAuthorized>
            </AuthorizeView>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="4">
        <MudPaper Class="d-flex align-right justify-right mud-width-full py-8">
            <AuthorizeView>
                <Authorized>
                    <MudList Clickable="true">
                        <MudNavLink OnClick="@((e) => OpenPwCreator())" Icon="@Icons.Material.Filled.AddCircleOutline" IconColor="Color.Success">Создать пароль</MudNavLink>
                        @foreach (var pas in passwords)
                        {
                            <MudListItem @onclick="@(() => PwDetail(pas.Id))">
                                <MudText Typo="Typo.h6">
                                    <MudIcon Color="Color.Primary" Icon="@Icons.Material.Filled.Key"></MudIcon>
                                    @pas.Title
                                </MudText>
                                @foreach (var mtag in pas.Tags)
                                {
                                    <MudChip OnClick="@(() => {return;})" Color="Color.Default">@mtag.Title</MudChip>
                                }
                            </MudListItem>
                        }
                    </MudList>
                </Authorized>
                <NotAuthorized>
                    <MudText Typo="Typo.body2" Color="Color.Error" Class="px-4">Требуется авторизация</MudText>
                </NotAuthorized>
            </AuthorizeView>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6">
        <AuthorizeView>
            <Authorized>
                <MudCard Outlined="false" Class="d-flex align-right  mud-width-full py-8">
                    <MudCardContent>
                        <MudText>Story of the day</MudText>
                        <MudText Typo="Typo.body2">The quick, brown fox jumps over a lazy dog.asdasd</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary">Learn More</MudButton>
                    </MudCardActions>
                </MudCard>
            </Authorized>
            <NotAuthorized>
                <MudText Typo="Typo.body2" Color="Color.Error" Class="px-4">Требуется авторизация</MudText>
            </NotAuthorized>
        </AuthorizeView>
    </MudItem>
</MudGrid>


@code {
    private Guid currentSafe;
    private string currentSafeName = string.Empty;
    private string currentComName = string.Empty;
    private List<PasswordVm> passwords = new();
    private PasswordDetailVm pwDetial;


    protected override async Task OnInitializedAsync()
    {
        var provider = (CustomAuthStateProvider)AuthenticationStateProvider;
        var authenticated = await provider.GetAuthenticationStateAsync();
        bool? isAuthenticated = authenticated.User.Identity?.IsAuthenticated;
        if ((isAuthenticated is not null) && isAuthenticated == true)
        {
            HubClient.OnCompanyUpdated += HandleCompanyUpdated;
            await ApiService.LoadOwnerCom();
            await ApiService.LoadLinkedCom();
            StateHasChanged();
        }
    }

    private void HandleCompanyUpdated()
    {
        // Обновление списка компаний при получении обновлений
        InvokeAsync(async () =>
        {
            await ApiService.LoadOwnerCom();
            await ApiService.LoadLinkedCom();
            StateHasChanged();
        });
    }

    private void HandlePasswordUpdated()
    {
        // Обновление списка паролей при получении обновлений
        InvokeAsync(async () =>
        {
            await ApiService.LoadLinkedPasswords(currentSafe);
            passwords = ApiService.Passwords;
            StateHasChanged();
        });
    }

    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };

    async Task CreateSafe(Guid comId, string comName)
    {
        var parameters = new DialogParameters();
        parameters.Add("comId", comId);
        parameters.Add("comName", comName);

        var dialog = await DialogService.ShowAsync<CreateSafe>("Создать сейф", parameters, maxWidth);
    }

    async Task OpenPwCreator()
    {
        var parameters = new DialogParameters();
        parameters.Add("SafeId", currentSafe);

        var dialog = await DialogService.ShowAsync<CreatePassword>("Создать пароль", parameters, maxWidth);
    }

    async Task PwDetail(Guid id)
    {
        var response = await ApiService.LoadPasswordDetail(id);
        if(response == null)
        {
            pwDetial = ApiService.PasswordDetail;
            StateHasChanged();
        }
        else
        {
            Snackbar.Add(response, Severity.Warning);
        }
    }

    async Task SelectSafe(Guid safeId, string safeName, string comName)
    {
        var provider = (CustomAuthStateProvider)AuthenticationStateProvider;
        var authenticated = await provider.GetAuthenticationStateAsync();
        bool? isAuthenticated = authenticated.User.Identity?.IsAuthenticated;
        if ((isAuthenticated is not null) && isAuthenticated == true)
        {
            currentSafe = safeId;
            currentSafeName = safeName;
            currentComName = comName;
            await ApiService.LoadLinkedPasswords(safeId);
            passwords = ApiService.Passwords;
            HubClient.OnPassworUpdated += HandlePasswordUpdated;
        }
    }
}