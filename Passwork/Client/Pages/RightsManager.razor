@page "/rights/{SafeName}/{SafeId:guid}"
@attribute [Authorize]
@using Passwork.Client.Components;
@using Passwork.Shared.ViewModels;
@using System.Runtime.CompilerServices;
@using System.ComponentModel;
@using System.Net.Http.Json


@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject ApiService ApiService
@inject HubClient HubClient
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Rights</PageTitle>

<MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
    <AuthorizeView>
        <Authorized>
            <MudGrid>
                <MudItem xs="12" sm="4">
                    <MudTextField @bind-Value="globalSearch" Placeholder="Email" Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.PersonSearch" IconSize="Size.Medium" AdornmentColor="Color.Primary"></MudTextField>
                    <MudButton @onclick="TrySendInvite">Найти и выдать права для сейфа</MudButton>

                    <MudPaper>
                        <MudList Clickable="true">
                            @if(companyUsers is not null)
                            {
                                <MudText Typo="Typo.h6">Другие пользователи компании:</MudText>
                                @foreach (var item in companyUsers)
                                {
                                    <MudListItem Icon="@Icons.Material.Filled.Person">
                                        @item.Email <MudChip Color="Color.Success" @onclick="@(() => AddUserFromSafe(@item.Email))" 
                                            Icon="@Icons.Material.Filled.ArrowRight">Дать доступ</MudChip>
                                    </MudListItem>
                                }
                            }
                            else
                            {
                                <MudProgressCircular Class="ms-5" Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                            }
                        </MudList>
                    </MudPaper>

                </MudItem>
                
                <MudItem xs="12" sm="8">
                        <MudText Inline="true" Class="align-self-center">Выбран: @selectedUser?.Email</MudText>
                        @if(selectedUser is not null)
                        {
                            <MudSelect @bind-Value="@selectedUser.Right" T="RightEnumVm" Label="Уровень доступа" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                                <MudSelectItem Value="@RightEnumVm.Отсутствует" />
                                <MudSelectItem Value="@RightEnumVm.Смотреть" />
                                <MudSelectItem Value="@RightEnumVm.Читать" />
                                <MudSelectItem Value="@RightEnumVm.Записывать" />
                                <MudSelectItem Value="@RightEnumVm.Приглашать" />
                                <MudSelectItem Value="@RightEnumVm.Удалять" />
                                <MudSelectItem Value="@RightEnumVm.Владелец" />
                            </MudSelect>
                        }
                    <MudSpacer/>
                    <MudTable Class="mt-5" Items="@safeUsers" Dense="false" Hover="true" Bordered="false" Striped="false" 
                        Filter="new Func<SafeUserVm,bool>(FilterFunc1)" @bind-SelectedItem="selectedUser">
                        <ToolBarContent>
                            <MudText Typo="Typo.h4">Сейф - @SafeName</MudText>
                            <MudSpacer />
                            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" 
                            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>Id</MudTh>
                            <MudTh>Email</MudTh>
                            <MudTh>Права</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="table">
                            <MudTd DataLabel="Nr">@(table.UserId.ToString()[..3])...@(table.UserId.ToString()[^3..])</MudTd>
                            <MudTd DataLabel="Email">@table.Email</MudTd>
                            <MudTd DataLabel="Rights">@table.Right.ToString()</MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager InfoFormat=""/>
                        </PagerContent>
                    </MudTable>
                </MudItem>
            </MudGrid>
        </Authorized>
        <NotAuthorized>
            <MudText Typo="Typo.body2" Color="Color.Error" Class="px-4">Требуется авторизация</MudText>
        </NotAuthorized>
    </AuthorizeView>
</MudPaper>


@code {
    [Parameter]
    public Guid SafeId {get; set;}
    [Parameter]
    public string SafeName { get; set; }

    private string searchString { get; set; } = string.Empty;
    private string globalSearch { get; set; } = string.Empty;
    private List<SafeUserVm> safeUsers = new();
    private SafeUserVm selectedUser = null;
    private List<ComUserVm> companyUsers;

    protected override async Task OnInitializedAsync()
    {
        await FindLinkedUsers();
        await FindCompanyUsers();
        StateHasChanged();
    }


    async Task FindLinkedUsers()
    {
        var response = await ApiService.LoadSafeUsers(SafeId);
        if (response == null)
        {
            safeUsers = ApiService.SafeUsers;
        }
        else
        {
            Snackbar.Add(response, Severity.Error);
        }
    }

    async Task FindCompanyUsers()
    {
        var responseMessage = await ApiService.LoadComUsers(SafeId);
        if (responseMessage == null)
        {
            companyUsers = ApiService.ComUsers;
        }
        else
        {
            Snackbar.Add(responseMessage, Severity.Error);
        }
    }

    async Task TrySendInvite()
    {
        var model = new AddUserToSafeDto()
            {
                Right = RightEnumVm.Смотреть,
                UserEmail = globalSearch,
                SafeId = SafeId
            };
        var response = await ApiService.PostDataAsync<AddUserToSafeDto>("api/Safe/AddUser", model);
        if(response == false)
        {
            Snackbar.Add(ApiService.CurrentErrorMessage.Message, Severity.Warning);
        }
        else
        {
            Snackbar.Add("В сейф добавлен новый пользователь", Severity.Success);
        }
    }

    async Task AddUserFromSafe(string email)
    {
        var model = new AddUserToSafeDto()
            {
                Right = RightEnumVm.Смотреть,
                UserEmail = email,
                SafeId = SafeId
            };
        var response = await ApiService.PostDataAsync<AddUserToSafeDto>("api/Safe/AddUser", model);
        if (response == false)
        {
            Snackbar.Add(ApiService.CurrentErrorMessage.Message, Severity.Warning);
        }
        else
        {
            Snackbar.Add("В сейф добавлен новый пользователь", Severity.Success);
        }
    }

    private bool FilterFunc1(SafeUserVm element) => FilterFunc(element, searchString);
    private bool FilterFunc(SafeUserVm element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Right.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Email} {element.Right.ToString()}".Contains(searchString))
            return true;
        return false;
    }
}