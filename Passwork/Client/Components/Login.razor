@page "/login"
@inject AuthenticationManager AuthenticationManager
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject ISnackbar Snackbar

@using System.ComponentModel.DataAnnotations
@using Blazored.Toast.Services;
@using Passwork.Client.Utils;

<MudText Align="Align.Center" Typo="Typo.body2" Color="Color.Surface">Для работы с сайтом требуется авторизация</MudText>
<MudDialog>
    <DialogContent>
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" sm="12">
                    <MudCard>
                        <MudCardContent>
                            <MudTextField Label="Email" Class="mt-3"
                            @bind-Value="model.Email" For="@(() => model.Email)" />

                            <MudTextField Label="Password" HelperText="Ваш пароль" Class="mt-3"
                            @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                        </MudCardContent>
                        <MudCardActions>
                            <ButtonWait @bind-IsLoad="@isLoad">
                                Войти
                            </ButtonWait>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>
    </DialogContent>

    <DialogActions>
        <MudButton Color="Color.Secondary" OnClick="@(() => NavigationManager.NavigateTo("/register"))">Создать новый аккаунт</MudButton>
        <MudSpacer/>
        <MudButton OnClick="Cancel">Отмена</MudButton>
    </DialogActions>
</MudDialog>


@code {
    UserLoginDto model = new UserLoginDto();
    bool success;
    bool isLoad = false;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    void Cancel() => MudDialog.Cancel();

    private async Task OnValidSubmit(EditContext context)
    {
        if (context.Validate())
        {
            isLoad = true;
            success = true;
            StateHasChanged();

            if (await AuthenticationManager.Login(model))
            {
                Snackbar.Add("Успешно зашли", Severity.Success);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                isLoad = false;
                Snackbar.Add("Не верный логин или пароль", Severity.Error);
            }

            StateHasChanged();
        }
    }
}
