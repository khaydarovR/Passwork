@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@inject ApiService ApiService
@inject AuthenticationStateProvider AuthenticationStateProvider

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms;
@using MudBlazor;
@using Passwork.Client.Services;
@using Passwork.Client.Utils;
@using Passwork.Shared.Dto;
@using System.Net.Http.Json;
@using System.Net;
@using Passwork.Shared.ViewModels;


<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Create" Class="mr-3 mb-n1" />
                Создать новый пароль
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudTextField @bind-Value="@model.Title" For="@(() => model.Title)" Label="Название" />
            <MudTextField @bind-Value="@model.Login" For="@(() => model.Login)" Label="Логин" />
            <MudTextField @bind-Value="@model.Pw" For="@(() => model.Pw)" Label="Пароль" HelperText="Будет зашифрован с помощью вашего мастер-пароля"/>
            <MudTextField @bind-Value="@model.Note" For="@(() => model.Note)" Label="Заметка к записи"/>
            <MudTextField @bind-Value="@model.UseInUrl" For="@(() => model.UseInUrl)" Label="Ссылка" HelperText="Ссылка на рессурс где надо использовать пароль" />
            <EditForm Model="@newTag" OnValidSubmit="OnAddNewTag" Context="tagContext">
                <MudStack Row="true">
                    <MudTextField @bind-Value="@newTag.Title" Placeholder="Новый тэг"></MudTextField>
                    <MudIconButton Color="Color.Success" ButtonType="ButtonType.Submit" Icon="@Icons.Material.Filled.AddCircle"></MudIconButton>
                </MudStack>
            </EditForm>
            <MudDropContainer T="DropItem" Items="_items" ItemsSelector="@((item,dropzone) => item.Identifier == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
                <ChildContent>
                    <MudDropZone T="DropItem" Identifier="added" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
                        <MudText Typo="Typo.h6" Class="mb-4">Прикреплены к паролю</MudText>
                    </MudDropZone>
                    <MudDropZone T="DropItem" Identifier="have" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
                        <MudText Typo="Typo.h6" Class="mb-4">Тэги в сейфе</MudText>
                    </MudDropZone>
                </ChildContent>
                <ItemRenderer Context="itemsContext">
                    <MudStack Row="true">
                        <MudPaper Class="py-1 px-5 ma-1">
                            # @itemsContext.Tag.Title
                        </MudPaper>
                    </MudStack>
                </ItemRenderer>
            </MudDropContainer>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Отмена</MudButton>
            <ButtonWait @bind-IsLoad="@isLoad">Создать</ButtonWait>
        </DialogActions>
    </MudDialog>
</EditForm>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Guid SafeId { get; set; }
    private List<string> Tags { get; set; } = new();
    bool isLoad = false;
    string errorMessage = null;
    void Cancel() => MudDialog.Cancel();
    TagVm newTag = new();

    PasswordCreateDto model = new() {Tags = new()};

    protected override async Task OnInitializedAsync()
    {
        await LoadLinkedTags();
        StateHasChanged();
    }

    private async Task OnValidSubmit(EditContext context)
    {
        if (context.Validate())
        {
            isLoad = true;
            StateHasChanged();

            model.SafeId = SafeId;
            model.Tags = _items
            .Where(i => i.Identifier == "added")
            .Select(i => i.Tag.Title)
            .ToList();

            var isDataPosted = await ApiService.PostDataAsync("/api/Password/Create", model);
            if (isDataPosted)
            {
                Snackbar.Add("Успешно создана", Severity.Success);
                ApiService.NavigateTo("/");
            }
            else
            {
                isLoad = false;
                Snackbar.Add(ApiService.CurrentMessage.Message, Severity.Warning);
            }
            StateHasChanged();
        }
    }

    void OnAddNewTag(EditContext tagContext)
    {
        var dropItem = new DropItem() { Tag = new TagVm() { Title = newTag.Title }, Identifier = "have" };
        _items.Add(dropItem);
        StateHasChanged();
    }

    async Task LoadLinkedTags()
    {
        await ApiService.LoadLinkedTags(SafeId);
        foreach (var t in ApiService.Tags)
        {
            var dropItem = new DropItem()
                {
                    Tag = t,
                    Identifier = "have"
                };
            _items.Add(dropItem);
        }
    }

    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
    }

    private List<DropItem> _items = new();

    public class DropItem
    {
        public TagVm Tag { get; set; } = new();
        public string Identifier { get; set; }
    }
}
